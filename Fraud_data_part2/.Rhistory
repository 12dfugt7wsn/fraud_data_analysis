knitr::opts_chunk$set(echo = FALSE)
fraud <- read_csv("/Users/lujiaqi/Desktop/data sci/x/DS_CLASS_2018-19_Lucia/DataSci_2/Fraud/Fraud_Data.csv")
library(caret)
library(randomForest)
library(tidyverse)
library(rpart)
library(rattle)
library(gbm)
library(readr)
fraud <- read_csv("/Users/lujiaqi/Desktop/data sci/x/DS_CLASS_2018-19_Lucia/DataSci_2/Fraud/Fraud_Data.csv")
library(readr)
Fraud_Data <- read_csv("Fraud_Data.csv")
View(Fraud_Data)
fraud <- read_csv("/Users/lujiaqi/Desktop/data sci/x/DS_CLASS_2018-19_Lucia/DataSci_2/Fraud/Fraud_Data.csv")
fraud <-fraud %>%
na.omit()%>%
mutate(time=purchase_time-signup_time)%>%
mutate(sex=as.factor(sex))
fraud<-select(fraud, -purchase_time,-signup_time)
fraud%>%
group_by(user_id)%>%
summarise(n=n())%>%
arrange(desc(n))
fraud<-fraud%>%
select(-user_id)
set.seed(100)
inTraining <- createDataPartition(fraud$class, p = .75, list = FALSE)
trainingData <- fraud[inTraining, ]
testingData<- fraud[-inTraining, ]
fraud_deviceid<-trainingData%>%
group_by(device_id)%>%
summarise(id_n=n())
trainingData<-merge(trainingData,fraud_deviceid,by="device_id")
fraud_ipaddress<-trainingData%>%
group_by(ip_address)%>%
summarise(ip_n=n())
trainingData<-merge(trainingData,fraud_ipaddress,by="ip_address")
trainingData<-trainingData%>%
select(-c(ip_address,device_id))
trainingData<-trainingData%>%
mutate(sex= ifelse(sex=="F",1,0))
dmy <- dummyVars(" ~ browser", data = trainingData)
trsf_browser <- data.frame(predict(dmy, newdata = trainingData))
trainingData<-cbind(trainingData,trsf_browser)
training_Data<-trainingData%>%
select(-c(browser))
dmy <- dummyVars(" ~ source", data = trainingData)
trsf_source <- data.frame(predict(dmy, newdata = trainingData))
trainingData<-cbind(trainingData,trsf_source)
training_Data<-training_Data%>%
select(-source)
fraud_deviceid<-testingData%>%
group_by(device_id)%>%
summarise(id_n=n())
testingData<-merge(testingData,fraud_deviceid,by="device_id")
fraud_ipaddress<-testingData%>%
group_by(ip_address)%>%
summarise(ip_n=n())
testingData<-merge(testingData,fraud_ipaddress,by="ip_address")
testingData<-testingData%>%
select(-c(ip_address,device_id))
testingData<-testingData%>%
mutate(sex= ifelse(sex=="F",1,0))
dmy <- dummyVars(" ~ browser", data = testingData)
trsf_browser <- data.frame(predict(dmy, newdata = testingData))
testingData<-cbind(testingData,trsf_browser)
View(testingData)
testingData<-testingData%>%
select(-c(browser))
dmy <- dummyVars(" ~ source", data = testingData)
trsf_source <- data.frame(predict(dmy, newdata = testingData))
testingData<-cbind(testingData,trsf_source)
testingData<-testingData %>%
select(-source)
set.seed(100)
training_data_1<-training_Data%>%
mutate(time=as.numeric(time))
testing_data_1<-testingData%>%
mutate(time=as.numeric(time))
start<-Sys.time()
boost.epi =gbm(class~.,data=training_data_1[1:1000,], distribution=
"gaussian",n.trees =5000 , interaction.depth =4)
end<-Sys.time()
end-start
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "response",
single.tree = FALSE)
confusionMatrix(predict_boost,as.factor(testingData$class))
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "class",
single.tree = FALSE)
boost.epi =gbm(as.factor(class)~.,data=training_data_1[1:1000,], distribution=
"gaussian",n.trees =5000 , interaction.depth =4)
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "class",
single.tree = FALSE)
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "response",
single.tree = FALSE)
confusionMatrix(predict_boost,as.factor(testingData$class))
levels(predict_boost)
levels(testingData$class)
confusionMatrix(predict_boost,as.numeric(testingData$class))
confusionMatrix(predict_boost,testingData$class)
typeof(predict_boost)
confusionMatrix(as.factor(predict_boost),testingData$class)
confusionMatrix(as.factor(predict_boost),as.factor(testingData$class))
?predict
library(rpart)
predict_boost<-rpart::predict(boost.epi,testingData,n.trees = 1000,type = "response",
single.tree = FALSE)
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "response",
single.tree = FALSE)
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "class.",
single.tree = FALSE)
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "prob",
single.tree = FALSE)
confusionMatrix(predict_boost,testingData$class)
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData, type = "prob")[,2],response = testingData$class)%>%plot()
library(ROCR)
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData, type = "prob")[,2],response = testingData$class)%>%plot()
library(ROCR)
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData, type = "prob")[,2],response = testingData$class)%>%plot()
library(rattle)
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData, type = "prob")[,2],response = testingData$class)%>%plot()
library(pROC)
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData, type = "prob")[,2],response = testingData$class)%>%plot()
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData,n.trees = 1000, type = "prob")[,2],response = testingData$class)%>%plot()
roc(predictor=predict(boost.epi, testingData,n.trees = 1000, type = "response")[,2],response = testingData$class)%>%plot()
pdf("roc.pdf")
roc(predictor=predict(boost.epi, testingData,n.trees = 1000, type = "response")[,2],response = testingData$class)%>%plot()
boost.epi
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,type = "response",
single.tree = FALSE)
confusionMatrix(predict_boost,testingData$class)
typeof(predict_boost)
typeof(testingData$class)
confusionMatrix(predict_boost,as.double(testingData$class))
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 1000,
single.tree = FALSE)
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 1000)
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 5000)
predict_boost
confusionMatrix(predict_boost,as.double(testingData$class))
predict_boost<-predict(boost.epi,testingData,n.trees = 5000,type="response")
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 5000,type="link")
predict_boost
predict_boost<-predict(boost.epi,testingData,n.trees = 5000,type="link")
predict_boost
confusionMatrix(predict_boost,as.double(testingData$class))
View(training_data_1)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
predict_boost
levels(predict_boost)
levels(testingData$cla)
levels(testingData$class)
summary (predict_boost)
p.predict<- apply(predict_boost, 1, which.max)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
p.predict<- apply(predict_boost, 1, which.max)
p.predict<- apply(predict_boost, which.max)
?apply
summary(boost.epi)
plot.gbm(boost.epi, 1, best.iter)
best.iter = gbm.perf(boost.epi, method="cv")
library(pROC)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
head(predict_boost)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="prob")
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="link")
head(predict_boost)
boost.epi = gbm(as.factor(class)~.,data=training_data_1[1:1000,], distribution=
"bernoulli",n.trees =5000 , interaction.depth =4)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="link")
head(predict_boost)
summary(boost.epi)
boost.epi = gbm(as.factor(class)~.,data=training_data_1[1:1000,], distribution=
"gaussian",n.trees =5000 , interaction.depth =4)
summary(boost.epi)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="link")
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
head(predict_boost)
predict_boost
boost.epi = gbm(as.factor(class)~.,data=training_data_1[1:1000,], n.trees =5000 , interaction.depth =4)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
predict_boost
boost.epi = gbm(class~.,data=training_data_1[1:1000,], n.trees =5000 ,distribution = "bernoulli", interaction.depth =1)
summary(boost.epi)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
predict_boost
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="prob")
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="link")
predict_boost
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
confusionMatrix(predict_boost,as.double(testingData$class))
boost.epi = gbm(class~.,data=training_data_1[1:1000,], n.trees =5000 ,distribution = "bernoulli", interaction.depth =1)
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
predict_boost
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="class")
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="link")
predict_boost
predict_boost<-predict(boost.epi,training_data_1[1:1000,],n.trees = 5000,type="response")
predict_boost
predict_boost%>%
filter (predict_boost>0.5)
predict_boost%>%
filter (predict_boost[2]>0.5)
predict_boost%>%
filter (predict_boost[,2]>0.5)
predict_boost
predict_boost > 0.5
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
predict_boost<-predict(boost.epi,testingData[1:1000,],n.trees = 5000,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,testingData$class)
confusionMatrix(x,as.factor(testingData$class))
confusionMatrix(x,as.factor(testingData[1:1000,]$class))
boost.epi = gbm(class~.,data=training_data_1[1:1000,], n.trees =5000 ,distribution = "bernoulli", interaction.depth =1,cv.folds = 5,)
bestTreeForPrediction = gbm.perf(boost.epi)
boost.epi = gbm(class~.,data=training_data_1[1:1000,], n.trees =5000 ,distribution = "bernoulli", interaction.depth =1,shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =5000 ,distribution = "bernoulli", interaction.depth =1,shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(boost.epi)
predict_boost<-predict(boost.epi,testingData[1:2000,],n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData[1:2000,]$class))
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,shrinkage = .1,
n.minobsinnode = 200,
cv.folds = 5,
n.cores = 1)
bestTreeForPrediction = gbm.perf(boost.epi)
predict_boost<-predict(boost.epi,testingData[1:2000,],n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData[1:2000,]$class))
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,shrinkage = .1,
n.minobsinnode = 200
n.cores = 1)
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,shrinkage = .1,
n.minobsinnode = 200,
n.cores = 1)
bestTreeForPrediction = gbm.perf(boost.epi)
predict_boost<-predict(boost.epi,testingData[1:2000,],n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData[1:2000,]$class))
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =2000 ,distribution = "bernoulli", interaction.depth =1)
bestTreeForPrediction = gbm.perf(boost.epi)
predict_boost<-predict(boost.epi,testingData[1:2000,],n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData[1:2000,]$class))
boost.epi = gbm(class~.,data=training_data_1[1:2000,], n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,cv.folds = 5)
bestTreeForPrediction = gbm.perf(boost.epi)
predict_boost<-predict(boost.epi,testingData[1:2000,],n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData[1:2000,]$class))
start<-Sys.time()
boost.epi = gbm(class~.,data=training_data_1, n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,cv.folds = 5)
bestTreeForPrediction = gbm.perf(boost.epi)
end<-Sys.time()
end-start
summary(boost.epi)
predict_boost<-predict(boost.epi,testingData,n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData$class))
start<-Sys.time()
boost.epi = gbm(class~.,data=training_data_1, n.trees =2000 ,distribution = "bernoulli", interaction.depth =1,cv.folds = 10)
bestTreeForPrediction = gbm.perf(boost.epi)
end<-Sys.time()
end-start
summary(boost.epi)
predict_boost<-predict(boost.epi,testingData,n.trees = bestTreeForPrediction,type="response")
x<-rep(0,length(predict_boost))
x[predict_boost > 0.5]<-1
x=as.factor(x)
x
confusionMatrix(x,as.factor(testingData$class))
summary(boost.epi)
summary (predict_boost)
saveRDS(boost.epi,"boost.epi.rds")
boost.epi<-readRDS("boost.epi.rds")
bestTreeForPrediction = gbm.perf(boost.epi)
print(bestTreeForPrediction)
summary(boost.epi)
confusionMatrix(x,as.factor(testingData$class))
rfe_controller <- rfeControl(functions=lmFuncs, method="repeatedcv", repeats = 5, verbose = FALSE)
fraud_Profiler <- rfe(training_Data, as.factor(training_Data$class), rfeControl = rfe_controller)
table(testforest, as.factor(testingData$class))
testforest <-predict(rf1, newdata=testing_Data)
rf1<-readRDS("rf_fraud.rds")
testforest <-predict(rf1, newdata=testing_Data)
testforest <-predict(rf1, newdata=testingData)
table(testforest, as.factor(testingData$class))
confusionMatrix(testforest, as.factor(testingData$class))
varImpPlot(rf1)
randomForest::importance(rf1)
rf.pr =testforest[,2]
rf.pr =testforest
rf.pr
test.forest = predict(rf1, type = "prob", newdata = testingData)
forestpred = prediction(test.forest[,2], test$class)
test.forest = predict(rf1, type = "prob", newdata = testingData)
forestpred = prediction(test.forest[,2], test$class)
forestpred = prediction(test.forest[,2], testingData$class)
forestperf = performance(forestpred, "tpr", "fpr")
plot(perf, main="ROC", colorize=T)
plot(forestperf, col=3, add=TRUE)
plot(perf, main="ROC", colorize=T)
library(ROCR)
plot(perf, main="ROC", colorize=T)
plot(forestperf, col=3,main="ROC", colorize=T)
plot(forestperf, col=3,main="ROC")
pdf("roc.pdf")
roc(predictor=predict(rf1, testingData, type = "response"),response = testingData$class)%>%plot()
roc(predictor=predict(rf1, testingData, type = "response"),response = as.numeric(testingData$class))%>%plot()
auc.tmp <- performance(forestperf,"auc")
auc.tmp <- performance(forestpred,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
plot( segments(x0=0, y0=0, x1=1, y1=1, col="gray", lty=2),add=TRUE)
plot(forestperf, col=3,main="ROC")
plot( segments(x0=0, y0=0, x1=1, y1=1, col="gray", lty=2),add=TRUE)
plot(forestperf, col=3,main="ROC")
plot(segments(x0=0, y0=0, x1=1, y1=1, col="gray", lty=2))
test.forest = predict(rf1, type = "prob", newdata = testingData)
forestpred = prediction(test.forest[,2], testingData$class)
forestperf = performance(forestpred, "tpr", "fpr")
plot(forestperf, col=3,main="ROC")
plot(segments(x0=0, y0=0, x1=1, y1=1, col="gray", lty=2),add=TRUE)
forestpred = prediction(testforest[,2], testingData$class)
test.forest = predict(boost.epi, type = "prob", newdata = testingData)
test.forest = predict(boost.epi, type = "response", newdata = testingData)
forestpred = prediction(test.forest[,2], testingData$class)
forestpred = prediction(test.forest, testingData$class)
forestperf = performance(forestpred, "tpr", "fpr")
plot(forestperf, col=3,main="ROC")
auc.tmp <- performance(forestpred,"auc")
auc <- as.numeric(auc.tmp@y.values)
print(auc)
